// Generated by CoffeeScript 1.6.3
(function() {
  var $, Spine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Spine = this.Spine || require('spine');

  $ = Spine.$;

  Spine.Manager = (function(_super) {
    __extends(Manager, _super);

    Manager.include(Spine.Events);

    function Manager() {
      this.controllers = [];
      this.bind('change', this.change);
      this.add.apply(this, arguments);
    }

    Manager.prototype.add = function() {
      var cont, controllers, _i, _len, _results;
      controllers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        cont = controllers[_i];
        _results.push(this.addOne(cont));
      }
      return _results;
    };

    Manager.prototype.addOne = function(controller) {
      var _this = this;
      controller.bind('active', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.trigger.apply(_this, ['change', controller].concat(__slice.call(args)));
      });
      controller.bind('release', function() {
        return _this.controllers.splice(_this.controllers.indexOf(controller), 1);
      });
      return this.controllers.push(controller);
    };

    Manager.prototype.deactivate = function() {
      return this.trigger.apply(this, ['change', false].concat(__slice.call(arguments)));
    };

    Manager.prototype.change = function() {
      var args, cont, current, _i, _len, _ref;
      current = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this.controllers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cont = _ref[_i];
        if (cont !== current) {
          cont.deactivate.apply(cont, args);
        }
      }
      if (current) {
        return current.activate.apply(current, args);
      }
    };

    return Manager;

  })(Spine.Module);

  Spine.Controller.include({
    active: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (typeof args[0] === 'function') {
        this.bind('active', args[0]);
      } else {
        args.unshift('active');
        this.trigger.apply(this, args);
      }
      return this;
    },
    isActive: function() {
      return this.el.hasClass('active');
    },
    activate: function() {
      this.el.addClass('active');
      return this;
    },
    deactivate: function() {
      this.el.removeClass('active');
      return this;
    }
  });

  Spine.Stack = (function(_super) {
    __extends(Stack, _super);

    Stack.prototype.controllers = {};

    Stack.prototype.routes = {};

    Stack.prototype.className = 'spine stack';

    function Stack() {
      var key, value, _fn, _ref, _ref1,
        _this = this;
      Stack.__super__.constructor.apply(this, arguments);
      this.manager = new Spine.Manager;
      _ref = this.controllers;
      for (key in _ref) {
        value = _ref[key];
        if (this[key] != null) {
          throw Error("'@" + key + "' already assigned - choose a different name");
        }
        this[key] = new value({
          stack: this
        });
        this.add(this[key]);
      }
      _ref1 = this.routes;
      _fn = function(key, value) {
        var callback;
        if (typeof value === 'function') {
          callback = value;
        }
        callback || (callback = function() {
          var _ref2;
          return (_ref2 = _this[value]).active.apply(_ref2, arguments);
        });
        return _this.route(key, callback);
      };
      for (key in _ref1) {
        value = _ref1[key];
        _fn(key, value);
      }
      if (this["default"]) {
        this[this["default"]].active();
      }
    }

    Stack.prototype.add = function(controller) {
      this.manager.add(controller);
      return this.append(controller);
    };

    return Stack;

  })(Spine.Controller);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine.Manager;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports.Stack = Spine.Stack;
  }

}).call(this);

/*
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsic3JjL21hbmFnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtDQUFBLEtBQUEsRUFBQTtLQUFBOzt1QkFBQTs7Q0FBQSxDQUFBLENBQVMsQ0FBQyxDQUFWLEVBQW1COztDQUFuQixDQUNBLENBQVMsRUFBSzs7Q0FEZCxDQUdNLEdBQUs7Q0FDVDs7Q0FBQSxHQUFBLENBQWMsQ0FBZCxDQUFDOztDQUVZLEVBQUEsQ0FBQSxhQUFBO0NBQ1gsQ0FBQSxDQUFlLENBQWQsRUFBRCxLQUFBO0NBQUEsQ0FDZ0IsRUFBZixFQUFELEVBQUE7Q0FEQSxFQUVBLENBQUMsRUFBRCxHQUFBLElBQUs7Q0FMUCxJQUVhOztDQUZiLEVBT0EsTUFBSztDQUNILFNBQUEsMkJBQUE7Q0FBQSxLQURJLGlEQUNKO0FBQUEsQ0FBQTtZQUFBLHNDQUFBO2dDQUFBO0NBQUEsR0FBQyxFQUFEO0NBQUE7dUJBREc7Q0FQTCxJQU9LOztDQVBMLEVBVVEsR0FBUixHQUFTLENBQUQ7Q0FDTixTQUFBLEVBQUE7Q0FBQSxDQUEwQixDQUFBLENBQTFCLEVBQUEsRUFBQSxDQUEwQixDQUFoQjtDQUNSLEdBQUEsUUFBQTtDQUFBLE9BRHlCLCtDQUN6QjtDQUFDLENBQWtCLEVBQVksQ0FBOUIsRUFBRCxDQUFTLENBQXNCLENBQUEsR0FBQSxDQUF0QixDQUFUO0NBREYsTUFBMEI7Q0FBMUIsQ0FFMkIsQ0FBQSxDQUEzQixFQUFBLEdBQUEsQ0FBVTtDQUNQLENBQXFELEdBQXJELENBQUQsQ0FBb0IsR0FBQSxDQUFSLElBQVo7Q0FERixNQUEyQjtDQUcxQixHQUFBLE1BQUQsQ0FBWSxFQUFaO0NBaEJGLElBVVE7O0NBVlIsRUFrQlksTUFBQSxDQUFaO0NBQ0csQ0FBa0IsRUFBbEIsQ0FBeUIsRUFBMUIsQ0FBUyxDQUFpQixJQUExQjtDQW5CRixJQWtCWTs7Q0FsQlosRUF1QlEsR0FBUixHQUFRO0NBQ04sU0FBQSx5QkFBQTtDQUFBLENBRGdCLElBQVQsaURBQ1A7Q0FBQTtDQUFBLFVBQUEsZ0NBQUE7eUJBQUE7SUFBOEIsQ0FBVTtDQUN0QyxHQUFJLE1BQUosR0FBZ0I7VUFEbEI7Q0FBQSxNQUFBO0NBR0EsR0FBNkIsRUFBN0IsQ0FBQTtDQUFRLEdBQVIsR0FBTyxDQUFQLE9BQUEsQ0FBaUI7UUFKWDtDQXZCUixJQXVCUTs7Q0F2QlI7O0NBRDBCLElBQUs7O0NBSGpDLENBaUNBLEdBQUssRUFBTCxHQUFnQjtDQUNkLENBQVEsQ0FBQSxDQUFSLEVBQUEsR0FBUTtDQUNOLEdBQUEsTUFBQTtDQUFBLEtBRE8saURBQ1A7QUFBRyxDQUFILEdBQUcsQ0FBa0IsQ0FBckIsSUFBQTtDQUNFLENBQWdCLEVBQWYsSUFBRDtNQURGLEVBQUE7Q0FHRSxHQUFJLEdBQUosQ0FBQTtDQUFBLEdBQ0MsR0FBRCxDQUFBLEtBQVM7UUFKWDtDQURNLFlBTU47Q0FORixJQUFRO0NBQVIsQ0FRVSxDQUFBLENBQVYsSUFBQSxDQUFVO0NBQ1AsQ0FBRSxFQUFGLElBQUQsS0FBQTtDQVRGLElBUVU7Q0FSVixDQVdVLENBQUEsQ0FBVixJQUFBLENBQVU7Q0FDUixDQUFHLEVBQUYsRUFBRCxFQUFBO0NBRFEsWUFFUjtDQWJGLElBV1U7Q0FYVixDQWVZLENBQUEsQ0FBWixLQUFZLENBQVo7Q0FDRSxDQUFHLEVBQUYsRUFBRCxFQUFBLEdBQUE7Q0FEVSxZQUVWO0NBakJGLElBZVk7Q0FqRGQsR0FpQ0E7O0NBakNBLENBcURNLEdBQUs7Q0FDVDs7Q0FBQSxDQUFBLENBQWEsUUFBYjs7Q0FBQSxDQUFBLENBQ1EsR0FBUjs7Q0FEQSxFQUdXLE1BQVgsSUFIQTs7Q0FLYSxFQUFBLENBQUEsV0FBQTtDQUNYLFNBQUEsa0JBQUE7U0FBQSxHQUFBO0NBQUEsS0FBQSxHQUFBLCtCQUFBO0FBRVcsQ0FGWCxFQUVXLENBQVYsQ0FBbUIsQ0FBcEIsQ0FBQTtDQUVBO0NBQUEsVUFBQTsyQkFBQTtDQUNFLEdBQXdFLElBQXhFLFNBQUE7Q0FBQSxFQUFMLENBQWtCLENBQVAsV0FBQSw4QkFBQTtVQUFOO0NBQUEsRUFDRSxDQUFBLENBQVcsR0FBYjtDQUFtQixDQUFPLEVBQVAsQ0FBQSxLQUFBO0NBRG5CLFNBQ2E7Q0FEYixFQUVBLENBQUMsSUFBRDtDQUhGLE1BSkE7Q0FTQTtDQUFBLENBQ1csQ0FBTixFQUFBLElBQUM7Q0FDRixPQUFBLElBQUE7QUFBb0IsQ0FBcEIsR0FBb0IsQ0FBQSxDQUFBLEVBQXBCLEVBQUE7Q0FBQSxFQUFXLEVBQVgsR0FBQSxFQUFBO1VBQUE7Q0FBQSxFQUNhLEtBQWIsQ0FBYTtDQUFHLElBQUEsU0FBQTtDQUFFLElBQUEsQ0FBRixHQUFBLEtBQWdCLEdBQWhCO0NBRGhCLFFBQ2E7Q0FDWixDQUFXLENBQVosRUFBQyxHQUFELE9BQUE7Q0FKSixNQUNLO0NBREwsVUFBQSxDQUFBOzRCQUFBO0NBQ0UsQ0FBUztDQURYLE1BVEE7Q0FlQSxHQUF3QixFQUF4QixHQUF5QjtDQUF6QixHQUFFLEVBQUYsRUFBQSxDQUFHO1FBaEJRO0NBTGIsSUFLYTs7Q0FMYixFQXVCQSxNQUFNLENBQUQ7Q0FDSCxFQUFBLENBQUMsRUFBRCxDQUFRLEdBQVI7Q0FDQyxHQUFBLEVBQUQsSUFBQSxHQUFBO0NBekJGLElBdUJLOztDQXZCTDs7Q0FEd0IsSUFBSzs7O0NBNEJ2QixFQUFVLENBQWxCLENBQXVCLENBQWpCLENBQU47SUFqRkE7OztDQWtGUSxFQUFnQixDQUF4QixDQUFBLENBQU0sQ0FBUztJQWxGZjtDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiU3BpbmUgID0gQFNwaW5lIG9yIHJlcXVpcmUoJ3NwaW5lJylcbiQgICAgICA9IFNwaW5lLiRcblxuY2xhc3MgU3BpbmUuTWFuYWdlciBleHRlbmRzIFNwaW5lLk1vZHVsZVxuICBAaW5jbHVkZSBTcGluZS5FdmVudHNcblxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBAY29udHJvbGxlcnMgPSBbXVxuICAgIEBiaW5kICdjaGFuZ2UnLCBAY2hhbmdlXG4gICAgQGFkZChhcmd1bWVudHMuLi4pXG5cbiAgYWRkOiAoY29udHJvbGxlcnMuLi4pIC0+XG4gICAgQGFkZE9uZShjb250KSBmb3IgY29udCBpbiBjb250cm9sbGVyc1xuXG4gIGFkZE9uZTogKGNvbnRyb2xsZXIpIC0+XG4gICAgY29udHJvbGxlci5iaW5kICdhY3RpdmUnLCAoYXJncy4uLikgPT5cbiAgICAgIEB0cmlnZ2VyKCdjaGFuZ2UnLCBjb250cm9sbGVyLCBhcmdzLi4uKVxuICAgIGNvbnRyb2xsZXIuYmluZCAncmVsZWFzZScsID0+XG4gICAgICBAY29udHJvbGxlcnMuc3BsaWNlKEBjb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpLCAxKVxuXG4gICAgQGNvbnRyb2xsZXJzLnB1c2goY29udHJvbGxlcilcblxuICBkZWFjdGl2YXRlOiAtPlxuICAgIEB0cmlnZ2VyKCdjaGFuZ2UnLCBmYWxzZSwgYXJndW1lbnRzLi4uKVxuXG4gICMgUHJpdmF0ZVxuXG4gIGNoYW5nZTogKGN1cnJlbnQsIGFyZ3MuLi4pIC0+XG4gICAgZm9yIGNvbnQgaW4gQGNvbnRyb2xsZXJzIHdoZW4gY29udCBpc250IGN1cnJlbnRcbiAgICAgIGNvbnQuZGVhY3RpdmF0ZShhcmdzLi4uKVxuXG4gICAgY3VycmVudC5hY3RpdmF0ZShhcmdzLi4uKSBpZiBjdXJyZW50XG5cblNwaW5lLkNvbnRyb2xsZXIuaW5jbHVkZVxuICBhY3RpdmU6IChhcmdzLi4uKSAtPlxuICAgIGlmIHR5cGVvZiBhcmdzWzBdIGlzICdmdW5jdGlvbidcbiAgICAgIEBiaW5kKCdhY3RpdmUnLCBhcmdzWzBdKVxuICAgIGVsc2VcbiAgICAgIGFyZ3MudW5zaGlmdCgnYWN0aXZlJylcbiAgICAgIEB0cmlnZ2VyKGFyZ3MuLi4pXG4gICAgQFxuXG4gIGlzQWN0aXZlOiAtPlxuICAgIEBlbC5oYXNDbGFzcygnYWN0aXZlJylcblxuICBhY3RpdmF0ZTogLT5cbiAgICBAZWwuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgQFxuXG4gIGRlYWN0aXZhdGU6IC0+XG4gICAgQGVsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgIEBcblxuY2xhc3MgU3BpbmUuU3RhY2sgZXh0ZW5kcyBTcGluZS5Db250cm9sbGVyXG4gIGNvbnRyb2xsZXJzOiB7fVxuICByb3V0ZXM6IHt9XG5cbiAgY2xhc3NOYW1lOiAnc3BpbmUgc3RhY2snXG5cbiAgY29uc3RydWN0b3I6IC0+XG4gICAgc3VwZXJcblxuICAgIEBtYW5hZ2VyID0gbmV3IFNwaW5lLk1hbmFnZXJcblxuICAgIGZvciBrZXksIHZhbHVlIG9mIEBjb250cm9sbGVyc1xuICAgICAgdGhyb3cgRXJyb3IgXCInQCN7IGtleSB9JyBhbHJlYWR5IGFzc2lnbmVkIC0gY2hvb3NlIGEgZGlmZmVyZW50IG5hbWVcIiBpZiBAW2tleV0/XG4gICAgICBAW2tleV0gPSBuZXcgdmFsdWUoc3RhY2s6IEApXG4gICAgICBAYWRkKEBba2V5XSlcblxuICAgIGZvciBrZXksIHZhbHVlIG9mIEByb3V0ZXNcbiAgICAgIGRvIChrZXksIHZhbHVlKSA9PlxuICAgICAgICBjYWxsYmFjayA9IHZhbHVlIGlmIHR5cGVvZiB2YWx1ZSBpcyAnZnVuY3Rpb24nXG4gICAgICAgIGNhbGxiYWNrIG9yPSA9PiBAW3ZhbHVlXS5hY3RpdmUoYXJndW1lbnRzLi4uKVxuICAgICAgICBAcm91dGUoa2V5LCBjYWxsYmFjaylcblxuICAgIEBbQGRlZmF1bHRdLmFjdGl2ZSgpIGlmIEBkZWZhdWx0XG5cbiAgYWRkOiAoY29udHJvbGxlcikgLT5cbiAgICBAbWFuYWdlci5hZGQoY29udHJvbGxlcilcbiAgICBAYXBwZW5kKGNvbnRyb2xsZXIpXG5cbm1vZHVsZT8uZXhwb3J0cyA9IFNwaW5lLk1hbmFnZXJcbm1vZHVsZT8uZXhwb3J0cy5TdGFjayA9IFNwaW5lLlN0YWNrXG4iXX0=

*/
